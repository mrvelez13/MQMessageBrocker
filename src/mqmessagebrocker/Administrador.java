/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mqmessagebrocker;

import com.ibm.mq.MQException;
import com.ibm.mq.MQMessage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import mqconnector.ExchangeConnectorMQ;
import exceptions.MQMMessageBrockerConnectionRefusedException;
import exceptions.MQMMessageBrockerUnexpectedException;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.event.ChangeEvent;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import org.xml.sax.SAXException;
import utilities.ConnectionReader;

/**
 *
 * @author jonathan.velez
 */
public class Administrador extends javax.swing.JFrame {
    
    ExchangeConnectorMQ conn;
    ConnectionReader connectionReader;
    Color themeColor = Color.LIGHT_GRAY;
    Color textColor = Color.WHITE;
    
    /**
     * Creates new form Administrador
     */
    public Administrador()
    {
        initComponents();
        loadConnectionData();
        connectionListPopulation();
        mensajeTxa.setEditable( false );
        mensajeTxa.setBackground( Color.GRAY );
        cipherCbx.setEnabled( false );
        rutaKeyStoreTxt.setEnabled( false );
        cargaMasivaTxt.setEnabled( false );
        editarBtn.setEnabled( false );
        connectiosCbx.setEnabled( false );
        reqContrasenaChbx.setSelected( true );
        contrasenaTxt.setEnabled( false );
        opcionesColasBtn.setVisible( false );
        loadProgress.setVisible( false );        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mensajeTxa = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        connConfJPanel = new javax.swing.JPanel();
        connConfJPanel1 = new javax.swing.JPanel();
        servidorLbl = new javax.swing.JLabel();
        puertoLbl = new javax.swing.JLabel();
        canalLbl = new javax.swing.JLabel();
        connTypeLbl = new javax.swing.JLabel();
        gestorTxt = new javax.swing.JTextField();
        servidorTxt = new javax.swing.JTextField();
        puertoTxt = new javax.swing.JTextField();
        canalTxt = new javax.swing.JTextField();
        connTypeCbx = new javax.swing.JComboBox<>();
        gestorLbl = new javax.swing.JLabel();
        guardarBtn = new javax.swing.JButton();
        eliminarBtn = new javax.swing.JButton();
        limpiarBtn = new javax.swing.JButton();
        nombreConexionTxt = new javax.swing.JTextField();
        nombreConexionLbl = new javax.swing.JLabel();
        connConfJPanel2 = new javax.swing.JPanel();
        colaMqLbl = new javax.swing.JLabel();
        colaMqTxt = new javax.swing.JTextField();
        connConfJPanel3 = new javax.swing.JPanel();
        usePreConfigChbx = new javax.swing.JCheckBox();
        connectiosCbx = new javax.swing.JComboBox<>();
        editarBtn = new javax.swing.JButton();
        estadoLbl = new javax.swing.JLabel();
        statusLbl = new javax.swing.JLabel();
        conectarBtn = new javax.swing.JButton();
        secureConfJPanel = new javax.swing.JPanel();
        usuarioLbl = new javax.swing.JLabel();
        usuarioTxt = new javax.swing.JTextField();
        reqContrasenaChbx = new javax.swing.JCheckBox();
        contrasenaLbl = new javax.swing.JLabel();
        contrasenaTxt = new javax.swing.JPasswordField();
        cipherCbx = new javax.swing.JComboBox<>();
        cipherLbl = new javax.swing.JLabel();
        rutaKeyStoreLbl = new javax.swing.JLabel();
        rutaKeyStoreTxt = new javax.swing.JTextField();
        ponerMsgBtn = new javax.swing.JButton();
        cargaMasivaTxt = new javax.swing.JTextField();
        cargaMasivaChbx = new javax.swing.JCheckBox();
        limpiarMsjBtn = new javax.swing.JButton();
        opcionesColasBtn = new javax.swing.JButton();
        verLogBtn = new javax.swing.JButton();
        loadProgress = new javax.swing.JProgressBar();
        darkThemeRdb = new javax.swing.JRadioButton();
        cassicThemeRdb = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IBM MQ Message Manager");
        setLocation(new java.awt.Point(0, 0));
        setLocationByPlatform(true);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 0, true));
        jPanel2.setAutoscrolls(true);

        jSplitPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        jSplitPane1.setDividerLocation(400);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setToolTipText("");
        jSplitPane1.setAutoscrolls(true);
        jSplitPane1.setDoubleBuffered(true);
        jSplitPane1.setFocusCycleRoot(true);
        jSplitPane1.setFocusTraversalPolicyProvider(true);
        jSplitPane1.setInheritsPopupMenu(true);
        jSplitPane1.setOneTouchExpandable(true);

        jPanel1.setAutoscrolls(true);

        jScrollPane1.setAutoscrolls(true);

        mensajeTxa.setColumns(20);
        mensajeTxa.setRows(5);
        mensajeTxa.setAlignmentX(0.0F);
        mensajeTxa.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        jScrollPane1.setViewportView(mensajeTxa);
        mensajeTxa.getAccessibleContext().setAccessibleParent(jPanel1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1461, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
        );

        jSplitPane1.setTopComponent(jPanel1);

        jPanel3.setBackground(themeColor);
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setAutoscrolls(true);

        jInternalFrame1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        jInternalFrame1.setAutoscrolls(true);
        jInternalFrame1.setVisible(true);

        connConfJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Configuración de la conexión", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), Color.DARK_GRAY)); // NOI18N
        connConfJPanel.setToolTipText("Configuración de la conexión");

        connConfJPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        connConfJPanel1.setToolTipText("");

        servidorLbl.setText("Servidor");

        puertoLbl.setText("Puerto");

        canalLbl.setText("Canal");

        connTypeLbl.setText("Tipo de Conexión");

        gestorTxt.setText("DCOLQMGRMIG01");
        gestorTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gestorTxtActionPerformed(evt);
            }
        });

        servidorTxt.setText("10.8.87.145");

        puertoTxt.setText("1418");
        puertoTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                puertoTxtActionPerformed(evt);
            }
        });

        canalTxt.setText("CHANNEL.CLIENT");

        connTypeCbx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CLIENT", "SECURE" }));
        connTypeCbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connTypeCbxActionPerformed(evt);
            }
        });

        gestorLbl.setText("Gestor");
        gestorLbl.setVerifyInputWhenFocusTarget(false);

        guardarBtn.setText("Guardar");
        guardarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBtnActionPerformed(evt);
            }
        });

        eliminarBtn.setText("Eliminar");
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });

        limpiarBtn.setText("Limpiar");
        limpiarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarBtnActionPerformed(evt);
            }
        });

        nombreConexionLbl.setText("Nombre Conexion");

        javax.swing.GroupLayout connConfJPanel1Layout = new javax.swing.GroupLayout(connConfJPanel1);
        connConfJPanel1.setLayout(connConfJPanel1Layout);
        connConfJPanel1Layout.setHorizontalGroup(
            connConfJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connConfJPanel1Layout.createSequentialGroup()
                .addGroup(connConfJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(connConfJPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(connConfJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(servidorLbl)
                            .addComponent(puertoLbl)
                            .addComponent(canalLbl)
                            .addComponent(connTypeLbl)
                            .addComponent(gestorLbl)
                            .addComponent(nombreConexionLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(connConfJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gestorTxt)
                            .addComponent(puertoTxt)
                            .addComponent(servidorTxt)
                            .addComponent(canalTxt)
                            .addComponent(connTypeCbx, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nombreConexionTxt)))
                    .addGroup(connConfJPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(guardarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(eliminarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(limpiarBtn)))
                .addContainerGap())
        );
        connConfJPanel1Layout.setVerticalGroup(
            connConfJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, connConfJPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connConfJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreConexionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreConexionLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connConfJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gestorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gestorLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(connConfJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(servidorTxt)
                    .addComponent(servidorLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(connConfJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(puertoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(puertoLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(connConfJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(canalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(canalLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connConfJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connTypeCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connTypeLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(connConfJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarBtn)
                    .addComponent(eliminarBtn)
                    .addComponent(limpiarBtn))
                .addContainerGap())
        );

        connConfJPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        connConfJPanel2.setToolTipText("");

        colaMqLbl.setText("Cola MQ");

        javax.swing.GroupLayout connConfJPanel2Layout = new javax.swing.GroupLayout(connConfJPanel2);
        connConfJPanel2.setLayout(connConfJPanel2Layout);
        connConfJPanel2Layout.setHorizontalGroup(
            connConfJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connConfJPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(connConfJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(colaMqLbl)
                    .addComponent(colaMqTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        connConfJPanel2Layout.setVerticalGroup(
            connConfJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connConfJPanel2Layout.createSequentialGroup()
                .addComponent(colaMqLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(colaMqTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        connConfJPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        connConfJPanel3.setToolTipText("");

        usePreConfigChbx.setText("Utilizar conexiones preestablecitas");
        usePreConfigChbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usePreConfigChbxActionPerformed(evt);
            }
        });

        connectiosCbx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Administrador.this.itemStateChanged(evt);
            }
        });
        connectiosCbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectiosCbxActionPerformed(evt);
            }
        });

        editarBtn.setText("Editar");
        editarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout connConfJPanel3Layout = new javax.swing.GroupLayout(connConfJPanel3);
        connConfJPanel3.setLayout(connConfJPanel3Layout);
        connConfJPanel3Layout.setHorizontalGroup(
            connConfJPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connConfJPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(connConfJPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectiosCbx, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(usePreConfigChbx, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(connConfJPanel3Layout.createSequentialGroup()
                        .addComponent(editarBtn)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        connConfJPanel3Layout.setVerticalGroup(
            connConfJPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connConfJPanel3Layout.createSequentialGroup()
                .addComponent(usePreConfigChbx)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectiosCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editarBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        estadoLbl.setText("Estado:");

        statusLbl.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        statusLbl.setForeground(new java.awt.Color(255, 0, 0));
        statusLbl.setText("Desconectado");

        conectarBtn.setText("Conectar");
        conectarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conectarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout connConfJPanelLayout = new javax.swing.GroupLayout(connConfJPanel);
        connConfJPanel.setLayout(connConfJPanelLayout);
        connConfJPanelLayout.setHorizontalGroup(
            connConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connConfJPanelLayout.createSequentialGroup()
                .addComponent(connConfJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(connConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(connConfJPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(connConfJPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(connConfJPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(estadoLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(statusLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(conectarBtn)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        connConfJPanelLayout.setVerticalGroup(
            connConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connConfJPanelLayout.createSequentialGroup()
                .addComponent(connConfJPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(connConfJPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(connConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(connConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(statusLbl)
                        .addComponent(estadoLbl))
                    .addComponent(conectarBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(connConfJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        secureConfJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración de conexión segura"));
        secureConfJPanel.setToolTipText("Configuración de conexión segura");
        secureConfJPanel.setAutoscrolls(true);

        usuarioLbl.setText("Usuario");

        reqContrasenaChbx.setText("No requiere contraseña");
        reqContrasenaChbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqContrasenaChbxActionPerformed(evt);
            }
        });

        contrasenaLbl.setText("Contraseña");

        cipherCbx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ECDHE_ECDSA_3DES_EDE_CBC_SHA256", "ECDHE_ECDSA_AES_128_CBC_SHA256", "ECDHE_ECDSA_AES_128_GCM_SHA256", "ECDHE_ECDSA_AES_256_CBC_SHA384", "ECDHE_ECDSA_AES_256_GCM_SHA384", "ECDHE_ECDSA_NULL_SHA256", "ECDHE_ECDSA_RC4_128_SHA256", "ECDHE_RSA_3DES_EDE_CBC_SHA256", "ECDHE_RSA_AES_128_CBC_SHA256", "ECDHE_RSA_AES_128_GCM_SHA256", "ECDHE_RSA_AES_256_CBC_SHA384", "ECDHE_RSA_AES_256_GCM_SHA384", "ECDHE_RSA_NULL_SHA256", "ECDHE_RSA_RC4_128_SHA256", "TLS_RSA_WITH_3DES_EDE_CBC_SHA", "TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_AES_128_CBC_SHA256", "TLS_RSA_WITH_AES_128_GCM_SHA256", "TLS_RSA_WITH_AES_256_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA256", "TLS_RSA_WITH_AES_256_GCM_SHA384", "TLS_RSA_WITH_DES_CBC_SHA", "TLS_RSA_WITH_NULL_SHA256", "TLS_RSA_WITH_RC4_128_SHA256" }));

        cipherLbl.setText("Cipher");

        rutaKeyStoreLbl.setText("Ruta keystore");

        rutaKeyStoreTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rutaKeyStoreTxtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout secureConfJPanelLayout = new javax.swing.GroupLayout(secureConfJPanel);
        secureConfJPanel.setLayout(secureConfJPanelLayout);
        secureConfJPanelLayout.setHorizontalGroup(
            secureConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(secureConfJPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(secureConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(secureConfJPanelLayout.createSequentialGroup()
                        .addGroup(secureConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(contrasenaLbl)
                            .addComponent(usuarioLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(secureConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usuarioTxt)
                            .addComponent(contrasenaTxt)))
                    .addGroup(secureConfJPanelLayout.createSequentialGroup()
                        .addComponent(reqContrasenaChbx)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(secureConfJPanelLayout.createSequentialGroup()
                        .addGroup(secureConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rutaKeyStoreLbl)
                            .addComponent(cipherLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(secureConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cipherCbx, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rutaKeyStoreTxt))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        secureConfJPanelLayout.setVerticalGroup(
            secureConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(secureConfJPanelLayout.createSequentialGroup()
                .addGroup(secureConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usuarioLbl)
                    .addComponent(usuarioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(secureConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contrasenaLbl)
                    .addComponent(contrasenaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(reqContrasenaChbx)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(secureConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cipherCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cipherLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(secureConfJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rutaKeyStoreLbl)
                    .addComponent(rutaKeyStoreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        ponerMsgBtn.setText("Poner mensaje");
        ponerMsgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ponerMsgBtnActionPerformed(evt);
            }
        });

        cargaMasivaChbx.setText("Carga Masiva");
        cargaMasivaChbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargaMasivaChbxActionPerformed(evt);
            }
        });

        limpiarMsjBtn.setText("Limpiar Área de Mensaje");
        limpiarMsjBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarMsjBtnActionPerformed(evt);
            }
        });

        opcionesColasBtn.setText("Ver Opciones");

        verLogBtn.setText("Monitorear cola");
        verLogBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verLogBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addComponent(connConfJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(limpiarMsjBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(opcionesColasBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(verLogBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(cargaMasivaChbx)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cargaMasivaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ponerMsgBtn))
                            .addComponent(secureConfJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loadProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 60, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(connConfJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cargaMasivaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cargaMasivaChbx)
                    .addComponent(ponerMsgBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(secureConfJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(loadProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(limpiarMsjBtn)
                    .addComponent(opcionesColasBtn)
                    .addComponent(verLogBtn))
                .addContainerGap())
        );

        darkThemeRdb.setText("Dark");
        darkThemeRdb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                darkThemeRdbActionPerformed(evt);
            }
        });

        cassicThemeRdb.setText("Classic");
        cassicThemeRdb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cassicThemeRdbActionPerformed(evt);
            }
        });

        jLabel1.setText("Tema");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jInternalFrame1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(46, 46, 46)
                        .addComponent(darkThemeRdb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cassicThemeRdb)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(darkThemeRdb)
                    .addComponent(cassicThemeRdb)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setBottomComponent(jPanel3);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1487, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jSplitPane1)
                    .addContainerGap()))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 765, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ponerMsgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ponerMsgBtnActionPerformed
        
        if( mensajeTxa.getText().equals( "" ) && cargaMasivaChbx.isSelected() == false )
        {
            JOptionPane.showMessageDialog(this, "El área de mensaje está vacía.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if ( cargaMasivaChbx.isSelected() == true && cargaMasivaTxt.getText().equals( "" ) )
        {
            JOptionPane.showMessageDialog(this, "Debe indicar la ruta de archivos de carga masiva.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }     

        if ( colaMqTxt.getText().equals( "" ) )
        {
            JOptionPane.showMessageDialog(this, "El nombre de la Cola MQ está vacío.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ( conn != null )
        {
            try {
                if ( conn.status() )
                {
                    
                    if ( cargaMasivaChbx.isSelected() == true && cargaMasivaTxt.getText().equals( "" ) == false )
                    {
                        File path = new File( cargaMasivaTxt.getText().trim() );
                        File[] currentFiles = null;
                        
                        if ( path.exists() )
                        {
                            currentFiles = path.listFiles();
                            String[] currentFilesNames = new String[ currentFiles.length ];
                            currentFilesNames = filesName( currentFiles );
                            int i = 0;
                            
                            for ( i=0; i< currentFilesNames.length; i++ )
                            {
                                FileReader file = new FileReader( currentFilesNames[i] );
                                BufferedReader buffer = new BufferedReader( file );
                                
                                String content = "";
                                String cadena;
                                
                                while( ( cadena = buffer.readLine() ) != null )
                                {
                                    content = content + cadena;
                                }
                                
                                try 
                                {
                                    conn.sendMxML( content, colaMqTxt.getText() );
                                    JOptionPane.showMessageDialog(this, "Mensaje puesto con éxito.", "Información", JOptionPane.INFORMATION_MESSAGE);                                    
                                }
                                catch (MQMMessageBrockerConnectionRefusedException | MQMMessageBrockerUnexpectedException ex)
                                {   
                                    Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
                                    StringBuilder sb = new StringBuilder(ex.toString());
                                    for (StackTraceElement ste : ex.getStackTrace())
                                    {
                                        sb.append("\n\tat ");
                                     sb.append(ste);
                                    }
                                    String trace = sb.toString();                                   
                                               
                                    JOptionPane.showMessageDialog(this, trace, ex.getCause().toString(), JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        }
                    }   
                    else if ( cargaMasivaChbx.isSelected() == false && mensajeTxa.getText().equals( "" ) == false )
                    {
                        try 
                        {
                            conn.sendMxML( mensajeTxa.getText(), colaMqTxt.getText() );
                            JOptionPane.showMessageDialog(this, "Mensaje puesto con éxito.", "Información", JOptionPane.INFORMATION_MESSAGE);                                    
                        }
                        catch (MQMMessageBrockerConnectionRefusedException | MQMMessageBrockerUnexpectedException ex)
                        {   
                            Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
                            StringBuilder sb = new StringBuilder(ex.toString());
                            for (StackTraceElement ste : ex.getStackTrace())
                            {
                                sb.append("\n\tat ");
                             sb.append(ste);
                            }
                            String trace = sb.toString();
                            
                            JOptionPane.showMessageDialog(this, trace, ex.getCause().toString(), JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "El gestor está desconectado.", "Error", JOptionPane.WARNING_MESSAGE);                                    
                    return;
                }
            }
            catch (MQMMessageBrockerConnectionRefusedException | MQMMessageBrockerUnexpectedException ex)
            {
                Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
                StringBuilder sb = new StringBuilder(ex.toString());
                for (StackTraceElement ste : ex.getStackTrace())
                {
                    sb.append("\n\tat ");
                    sb.append(ste);
                }
                String trace = sb.toString();
                
                JOptionPane.showMessageDialog(this, trace, ex.getCause().toString(), JOptionPane.ERROR_MESSAGE);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "El gestor está desconectado.", "Error", JOptionPane.WARNING_MESSAGE);                                    
            return;
        }
    }//GEN-LAST:event_ponerMsgBtnActionPerformed
  
    private void conectarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conectarBtnActionPerformed
        
        Connection connection = new Connection();
        
        connection.setMqConnectionType( connTypeCbx.getSelectedItem().toString() );
        connection.setMqHost( servidorTxt.getText() );
        connection.setMqPort( puertoTxt.getText() );
        connection.setMqChannel( canalTxt.getText() );
        connection.setMqManager( gestorTxt.getText() );
        connection.setMqManagerUser( usuarioTxt.getText() );
        connection.setMqManagerPassword( contrasenaTxt.getText() );
        
        conn = new ExchangeConnectorMQ( connection );
        
        try
        {
            if( conectarBtn.getText().equals( "Conectar" ) )
            {
                if( conn.connect() )
                {
                    statusLbl.setForeground(new java.awt.Color(0, 153, 0));
                    statusLbl.setText("Conectado");
                    conectarBtn.setText( "Desconectar" );
                    mensajeTxa.setEditable(true);
                    mensajeTxa.setBackground( Color.WHITE );
                }
                else
                {
                    statusLbl.setForeground(new java.awt.Color(255, 0, 0));
                    statusLbl.setText("Desconectado");
                    mensajeTxa.setEditable( false );
                    mensajeTxa.setBackground( Color.WHITE );
                    mensajeTxa.repaint();
                }
            }
            else
            {
                if ( !conn.disconnect() );
                {
                    statusLbl.setForeground(new java.awt.Color(255, 0, 0));
                    statusLbl.setText("Desconectado");
                    conectarBtn.setText( "Conectar" );
                    mensajeTxa.setEditable( false );
                    mensajeTxa.setBackground( Color.GRAY );
                    mensajeTxa.repaint();
                }
            }            
        }
        catch (MQMMessageBrockerConnectionRefusedException | MQMMessageBrockerUnexpectedException ex)
        {
            Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
            StringBuilder sb = new StringBuilder(ex.toString());
            for (StackTraceElement ste : ex.getStackTrace())
            {
                sb.append("\n\tat ");
                sb.append(ste);
            }
            String trace = sb.toString();
//            mensajeTxa.setText( ex.getCause().toString()+"\n"+trace );
//            mensajeTxa.setEditable(false);  
            statusLbl.setForeground(new java.awt.Color(255, 0, 0));
            statusLbl.setText("Desconectado");
            conectarBtn.setText( "Conectar" );
            JOptionPane.showMessageDialog(conectarBtn, trace, ex.getCause().toString(), JOptionPane.ERROR_MESSAGE);
        }
        
        Timer timer = new Timer( 5000, new ActionListener()
        {
            public void actionPerformed( java.awt.event.ActionEvent e )
            {
                try
                {
                    int contador = 0;
                    
                    contador = contador + 1;
                        if( conn.status() )
                        {
//                            JOptionPane.showMessageDialog( jPanel2 , "Parece conectado " + contador, "Parece conectado", JOptionPane.ERROR_MESSAGE);
//                            statusLbl.setForeground(new java.awt.Color(0, 153, 0));
//                            statusLbl.setText("Conectado");
//                            conectarBtn.setText( "Desconectar" );
//                            mensajeTxa.setText( "" );
//                            mensajeTxa.setEditable(true);
                        }
                        else
                        {
                            statusLbl.setForeground(new java.awt.Color(255, 0, 0));
                            statusLbl.setText("Desconectado");
                            conectarBtn.setText( "Conectar" );
                            mensajeTxa.setEditable( false );
                            mensajeTxa.setBackground( Color.GRAY );
                            mensajeTxa.repaint();
                        }
                    
//                        if ( !conn.disconnect() );
//                        {
//                            statusLbl.setForeground(new java.awt.Color(255, 0, 0));
//                            statusLbl.setText("Desconectado");
//                            conectarBtn.setText( "Conectar" );
//                        }
                                
                }
                catch (MQMMessageBrockerConnectionRefusedException | MQMMessageBrockerUnexpectedException ex)
                {
                    Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
                    StringBuilder sb = new StringBuilder(ex.toString());
                    for (StackTraceElement ste : ex.getStackTrace())
                    {
                        sb.append("\n\tat ");
                        sb.append(ste);
                    }
                    String trace = sb.toString();
        //            mensajeTxa.setText( ex.getCause().toString()+"\n"+trace );
        //            mensajeTxa.setEditable(false); 
                    statusLbl.setForeground(new java.awt.Color(255, 0, 0));
                    statusLbl.setText("Desconectado");
                    conectarBtn.setText( "Conectar" );
                    JOptionPane.showMessageDialog(conectarBtn, trace, ex.getCause().toString(), JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        
        timer.start();
    }//GEN-LAST:event_conectarBtnActionPerformed

    private void cargaMasivaChbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargaMasivaChbxActionPerformed
        if ( cargaMasivaChbx.isSelected() )
        {
            cargaMasivaTxt.setEnabled( true );
            mensajeTxa.setEnabled( false );
        }
        else
        {
            cargaMasivaTxt.setEnabled( false );
            
            try {
                if ( conn.status() )
                {
                    mensajeTxa.setEnabled( true );
                }
            } catch (MQMMessageBrockerConnectionRefusedException ex) {
                Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MQMMessageBrockerUnexpectedException ex) {
                Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_cargaMasivaChbxActionPerformed

    private void connTypeCbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connTypeCbxActionPerformed
        String selected = connTypeCbx.getSelectedItem().toString();
        setConnType( selected );
        if ( "SECURE".equals( selected ) )
        {
            cipherCbx.setEnabled( true );
            rutaKeyStoreTxt.setEnabled( true );
        }
        else
        {
            cipherCbx.setEnabled( false );
            rutaKeyStoreTxt.setEnabled( false );
        }
    }//GEN-LAST:event_connTypeCbxActionPerformed

    private void guardarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBtnActionPerformed
        try
        {
           if( !emptyLabelsValidator() )
           {
              return;
           }
            
            String connectionName = nombreConexionTxt.getText();
            String itExists = connectionReader.validateConnectionExistence( connectionName );
            
            if( itExists.equals( "not exist" ) )
            {
              Connection newConnection = new Connection();
              
              newConnection.setConnectionName( connectionName );
              newConnection.setMqManager( gestorTxt.getText() );
              newConnection.setMqChannel( canalTxt.getText() );
              newConnection.setMqPort( puertoTxt.getText() );
              newConnection.setMqHost( servidorTxt.getText() );
              newConnection.setMqManagerUser( usuarioTxt.getText() );
              
              String selected = connTypeCbx.getSelectedItem().toString();
              newConnection.setMqConnectionType( selected );
              
              connectionReader.createNewConnectionConfiguration( newConnection );
              controlTextBox( false );
              JOptionPane.showMessageDialog(this, "Conexión creada", "Notificación", JOptionPane.INFORMATION_MESSAGE);
            }
            else if( itExists.equals( "exists" ) )
            {
                Connection newConnection = new Connection();
              
                newConnection.setConnectionName( connectionName );
                newConnection.setMqManager( gestorTxt.getText() );
                newConnection.setMqChannel( canalTxt.getText() );
                newConnection.setMqPort( puertoTxt.getText() );
                newConnection.setMqHost( servidorTxt.getText() );
                newConnection.setMqManagerUser( usuarioTxt.getText() );
              
                String selected = connTypeCbx.getSelectedItem().toString();
                newConnection.setMqConnectionType( selected );
              
                connectionReader.updateConnection( newConnection );
                controlTextBox( false );
                JOptionPane.showMessageDialog(this, "Conexión actualizada", "Notificación", JOptionPane.INFORMATION_MESSAGE);
            }else
            {
                JOptionPane.showMessageDialog(this, itExists, "Notificación", JOptionPane.INFORMATION_MESSAGE);
            }
            
            loadConnectionData();
            connectionListPopulation();            
            
            
        }
        catch ( SAXException ex )
        {
            Logger.getLogger( Administrador.class.getName() ).log( Level.SEVERE, null, ex );
        }
        catch ( IOException ex )
        {
            Logger.getLogger( Administrador.class.getName() ).log( Level.SEVERE, null, ex );
        }
        catch ( ParserConfigurationException ex )
        {
            Logger.getLogger( Administrador.class.getName() ).log( Level.SEVERE, null, ex );
        }
        catch ( TransformerException ex )
        {
            Logger.getLogger( Administrador.class.getName() ).log( Level.SEVERE, null, ex );
        }
    }//GEN-LAST:event_guardarBtnActionPerformed

    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        try {
            String connectionName = nombreConexionTxt.getText();
            String itExists = connectionReader.validateConnectionExistence( connectionName );
            
            if( itExists.equals( "exists" ) )
            {
                connectionReader.deleteConnection( connectionName );
            }
            
            loadConnectionData();
            connectionListPopulation();
            
            JOptionPane.showMessageDialog(this, "Conexión borrada", "Notificación", JOptionPane.INFORMATION_MESSAGE);
        }
        catch ( SAXException ex )
        {
            Logger.getLogger( Administrador.class.getName() ).log( Level.SEVERE, null, ex );
        }
        catch ( IOException ex )
        {
            Logger.getLogger( Administrador.class.getName() ).log( Level.SEVERE, null, ex );
        }
        catch ( ParserConfigurationException ex )
        {
            Logger.getLogger( Administrador.class.getName() ).log( Level.SEVERE, null, ex );
        }
        catch ( TransformerException ex )
        {
            Logger.getLogger( Administrador.class.getName() ).log( Level.SEVERE, null, ex );
        }
    }//GEN-LAST:event_eliminarBtnActionPerformed

    private void gestorTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gestorTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gestorTxtActionPerformed

    private void puertoTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puertoTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_puertoTxtActionPerformed

    private void connectiosCbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectiosCbxActionPerformed

    }//GEN-LAST:event_connectiosCbxActionPerformed

    private void itemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemStateChanged
        if( evt.getStateChange() == ItemEvent.SELECTED )
        {
            Connection conn = ( Connection ) connectiosCbx.getSelectedItem();
            if ( conn != null )
            {
                gestorTxt.setText( conn.getMqManager() );
                servidorTxt.setText( conn.getMqHost() );
                puertoTxt.setText( conn.getMqPort() );
                canalTxt.setText( conn.getMqChannel() );
                usuarioTxt.setText( conn.getMqManagerUser() );
                nombreConexionTxt.setText( conn.getConnectionName() );
            }            
        }
    }//GEN-LAST:event_itemStateChanged

    private void usePreConfigChbxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_usePreConfigChbxActionPerformed
    {//GEN-HEADEREND:event_usePreConfigChbxActionPerformed
        if( usePreConfigChbx.isSelected() )
        {
            controlTextBox( false);
            editarBtn.setEnabled( true );
            connectiosCbx.setEnabled( true);
        }
        else
        {
            controlTextBox( true);
            editarBtn.setEnabled( false );
            connectiosCbx.setEnabled( false);
        }
    }//GEN-LAST:event_usePreConfigChbxActionPerformed

    private void editarBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editarBtnActionPerformed
    {//GEN-HEADEREND:event_editarBtnActionPerformed
        controlTextBox( true );
    }//GEN-LAST:event_editarBtnActionPerformed

    private void limpiarBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_limpiarBtnActionPerformed
    {//GEN-HEADEREND:event_limpiarBtnActionPerformed
        ConnectionLabelsCleaner();
    }//GEN-LAST:event_limpiarBtnActionPerformed

    private void verLogBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_verLogBtnActionPerformed
    {//GEN-HEADEREND:event_verLogBtnActionPerformed
        if ( colaMqTxt.getText().equals( "" ) )
        {
            JOptionPane.showMessageDialog(this, "El nombre de la Cola MQ está vacío.", "Error", JOptionPane.ERROR_MESSAGE);                                    
            return;
        }

        if ( conn != null )
        {
            try {
                if ( conn.status() )
                { 
                    try 
                    {
                        ArrayList<MQMessage> messages;
                        messages = conn.readOnce( colaMqTxt.getText() );
                        MessageListFrame frame = new MessageListFrame( messages, conn, colaMqTxt.getText() );
                        frame.setLocationRelativeTo( this );
                        frame.setVisible( true);
                    }
                    catch (MQMMessageBrockerConnectionRefusedException | MQMMessageBrockerUnexpectedException ex)
                    {   
                        Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
                        StringBuilder sb = new StringBuilder(ex.toString());
                        for (StackTraceElement ste : ex.getStackTrace())
                        {
                            sb.append("\n\tat ");
                            sb.append(ste);
                        }
                        String trace = sb.toString();

                        JOptionPane.showMessageDialog(this, trace, ex.getCause().toString(), JOptionPane.ERROR_MESSAGE);
                    }
                    catch( MQException ex )
                    {
                        Logger.getLogger( Administrador.class.getName() ).log( Level.SEVERE, null, ex );
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "El gestor está desconectado.", "Error", JOptionPane.WARNING_MESSAGE);                                    
                    return;
                }
            }
            catch (MQMMessageBrockerConnectionRefusedException | MQMMessageBrockerUnexpectedException ex)
            {
                Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
                StringBuilder sb = new StringBuilder(ex.toString());
                for (StackTraceElement ste : ex.getStackTrace())
                {
                    sb.append("\n\tat ");
                    sb.append(ste);
                }
                String trace = sb.toString();
                
                JOptionPane.showMessageDialog(this, trace, ex.getCause().toString(), JOptionPane.ERROR_MESSAGE);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "El gestor está desconectado.", "Error", JOptionPane.WARNING_MESSAGE);                                    
            return;
        }
    }//GEN-LAST:event_verLogBtnActionPerformed

    private void limpiarMsjBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_limpiarMsjBtnActionPerformed
    {//GEN-HEADEREND:event_limpiarMsjBtnActionPerformed
        mensajeTxa.setText( "" );
    }//GEN-LAST:event_limpiarMsjBtnActionPerformed

    private void darkThemeRdbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_darkThemeRdbActionPerformed
        if( darkThemeRdb.isSelected() )
        {
            cassicThemeRdb.setSelected(false);
        }
        themeColor = Color.DARK_GRAY;
        textColor = Color.LIGHT_GRAY;
        changeTheme(themeColor, textColor);
    }//GEN-LAST:event_darkThemeRdbActionPerformed

    private void cassicThemeRdbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cassicThemeRdbActionPerformed
        if( cassicThemeRdb.isSelected() )
        {
            darkThemeRdb.setSelected(false);
        }
        themeColor = Color.LIGHT_GRAY;
        textColor = Color.DARK_GRAY;
        changeTheme(themeColor, textColor);
    }//GEN-LAST:event_cassicThemeRdbActionPerformed

    private void rutaKeyStoreTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rutaKeyStoreTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rutaKeyStoreTxtActionPerformed

    private void reqContrasenaChbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqContrasenaChbxActionPerformed
        if ( reqContrasenaChbx.isSelected() )
        {
            contrasenaTxt.setEnabled( false );
        }
        else
        {
            contrasenaTxt.setEnabled( true );
        }
    }//GEN-LAST:event_reqContrasenaChbxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Administrador admin = new Administrador();
                admin.setConnType( admin.connTypeCbx.getSelectedItem().toString() );
                admin.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel canalLbl;
    private javax.swing.JTextField canalTxt;
    private javax.swing.JCheckBox cargaMasivaChbx;
    private javax.swing.JTextField cargaMasivaTxt;
    private javax.swing.JRadioButton cassicThemeRdb;
    private javax.swing.JComboBox<String> cipherCbx;
    private javax.swing.JLabel cipherLbl;
    private javax.swing.JLabel colaMqLbl;
    private javax.swing.JTextField colaMqTxt;
    private javax.swing.JButton conectarBtn;
    private javax.swing.JPanel connConfJPanel;
    private javax.swing.JPanel connConfJPanel1;
    private javax.swing.JPanel connConfJPanel2;
    private javax.swing.JPanel connConfJPanel3;
    private javax.swing.JComboBox<String> connTypeCbx;
    private javax.swing.JLabel connTypeLbl;
    private javax.swing.JComboBox<Connection> connectiosCbx;
    private javax.swing.JLabel contrasenaLbl;
    private javax.swing.JPasswordField contrasenaTxt;
    private javax.swing.JRadioButton darkThemeRdb;
    private javax.swing.JButton editarBtn;
    private javax.swing.JButton eliminarBtn;
    private javax.swing.JLabel estadoLbl;
    private javax.swing.JLabel gestorLbl;
    private javax.swing.JTextField gestorTxt;
    private javax.swing.JButton guardarBtn;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton limpiarBtn;
    private javax.swing.JButton limpiarMsjBtn;
    private javax.swing.JProgressBar loadProgress;
    private javax.swing.JTextArea mensajeTxa;
    private javax.swing.JLabel nombreConexionLbl;
    private javax.swing.JTextField nombreConexionTxt;
    private javax.swing.JButton opcionesColasBtn;
    private javax.swing.JButton ponerMsgBtn;
    private javax.swing.JLabel puertoLbl;
    private javax.swing.JTextField puertoTxt;
    private javax.swing.JCheckBox reqContrasenaChbx;
    private javax.swing.JLabel rutaKeyStoreLbl;
    private javax.swing.JTextField rutaKeyStoreTxt;
    private javax.swing.JPanel secureConfJPanel;
    private javax.swing.JLabel servidorLbl;
    private javax.swing.JTextField servidorTxt;
    private javax.swing.JLabel statusLbl;
    private javax.swing.JCheckBox usePreConfigChbx;
    private javax.swing.JLabel usuarioLbl;
    private javax.swing.JTextField usuarioTxt;
    private javax.swing.JButton verLogBtn;
    // End of variables declaration//GEN-END:variables

    private String connType;

    public String getConnType() {
        return connType;
    }

    public void setConnType(String connType) {
        this.connType = connType;
    }
    
    public static String [] filesName(File []files) 
    {   
        String [] stringArray = new  String [files.length];
        int i = 0;
        for(File file : files)
        {
            stringArray[i] = file.getAbsoluteFile().toString();
            i++;
        }
        Arrays.sort(stringArray);
        return stringArray;
    }
    
    public final void loadConnectionData()
    {
        try
        {
            connectionReader = new ConnectionReader();            
        }
        catch ( Exception ex )
        {
            Logger.getLogger( Administrador.class.getName() ).log( Level.SEVERE, null, ex );
        }
    }
    
    public final void connectionListPopulation()
    {
        try
        {
            if ( connectionReader.getConnections().size() > 0 )
            {
                connectiosCbx.removeAllItems();
                
                for( Connection c : connectionReader.getConnections() )
                {
                    connectiosCbx.addItem( c );
                }
            }
        }
        catch ( Exception ex )
        {
            Logger.getLogger( Administrador.class.getName() ).log( Level.SEVERE, null, ex );
        }
    }
    
    public void controlTextBox( boolean enable )
    {
        nombreConexionTxt.setEnabled( enable );
        gestorTxt.setEnabled( enable );
        servidorTxt.setEnabled( enable );
        puertoTxt.setEnabled( enable );
        canalTxt.setEnabled( enable );
        usuarioTxt.setEnabled( enable );
        contrasenaTxt.setEnabled( enable );
        rutaKeyStoreTxt.setEnabled( enable );
        guardarBtn.setEnabled( enable );
        eliminarBtn.setEnabled( enable );
        limpiarBtn.setEnabled( enable );
        connTypeCbx.setEnabled( enable );
        cipherCbx.setEnabled( enable );
        reqContrasenaChbx.setEnabled( enable );
    }
    
    public void ConnectionLabelsCleaner()
    {
        nombreConexionTxt.setText( "" );
        gestorTxt.setText( "" );
        servidorTxt.setText( "" );
        puertoTxt.setText( "" );
        canalTxt.setText( "" );
        usuarioTxt.setText( "" );
        contrasenaTxt.setText( "" );
        rutaKeyStoreTxt.setText( "" );        
    }
    
    public boolean emptyLabelsValidator()
    {
        String empties = "";
        
        if( nombreConexionTxt.getText().trim().equals( "" ) )
        {
            empties += nombreConexionLbl.getText() + "\n";
        }
        
        if( gestorTxt.getText().trim().equals( "" ) )
        {
            empties += gestorLbl.getText() + "\n";
        }
        
        if( servidorTxt.getText().trim().equals( "" ) )
        {
            empties += servidorLbl.getText() + "\n";
        }
        
        if( puertoTxt.getText().trim().equals( "" ) )
        {
            empties += puertoLbl.getText() + "\n";
        }
        
        if( canalTxt.getText().trim().equals( "" ) )
        {
            empties += canalLbl.getText() + "\n";
        }
        
        if( connTypeCbx.getSelectedItem().toString().equals( "SECURE" ) )
        {
            if( usuarioTxt.getText().trim().equals( "" ) )
            {
                empties += usuarioLbl.getText() + "\n";
            }
            
            if( !reqContrasenaChbx.isSelected() )
            {
                if( contrasenaTxt.getPassword().length == 0 )
                {
                    empties += contrasenaLbl.getText() + "\n";
                }
            }
            
            if( rutaKeyStoreTxt.getText().trim().equals( "" ) )
            {
                empties += rutaKeyStoreLbl.getText() + "\n";
            }
        }
        
        if( !empties.trim().equals( "" ) )
        {
            JOptionPane.showMessageDialog(this, "Los siguientes campos están vacíos: \n" + empties, "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    private void changeTheme(Color theme, Color text)
    {
        jPanel2.setBackground( theme );
        jSplitPane1.setBackground( theme );
        jPanel1.setBackground( theme );
        jScrollPane1.setBackground( theme );
        mensajeTxa.setBackground( theme );
        jPanel3.setBackground( theme );
        jInternalFrame1.setBackground( theme );
        connConfJPanel.setBackground( theme );
        connConfJPanel1.setBackground( theme );
        connConfJPanel2.setBackground( theme );
        connConfJPanel3.setBackground( theme );
        
        servidorLbl.setForeground( text );
        puertoLbl.setForeground( text );
        canalLbl.setForeground( text );
        connTypeLbl.setForeground( text );
        gestorLbl.setForeground( text );
        nombreConexionLbl.setForeground( text );
        cipherLbl.setBackground( text );
        rutaKeyStoreTxt.setBackground( theme );
        rutaKeyStoreLbl.setBackground( text );        
        contrasenaLbl.setBackground( text );
        jLabel1.setBackground( text );        
        guardarBtn.setBackground( theme );
        eliminarBtn.setBackground( theme );
        limpiarBtn.setBackground( theme );
        
        
        
        
        
        colaMqLbl.setBackground( theme );
        colaMqTxt.setBackground( theme );
        
                
        
        usePreConfigChbx.setBackground( theme );
        editarBtn.setBackground( theme );
        estadoLbl.setBackground( theme );
        statusLbl.setBackground( theme );
        conectarBtn.setBackground( theme );
        secureConfJPanel.setBackground( theme );
        
        reqContrasenaChbx.setBackground( theme );        
        
        ponerMsgBtn.setBackground( theme );
        
        cargaMasivaChbx.setBackground( theme );
        limpiarMsjBtn.setBackground( theme );
        opcionesColasBtn.setBackground( theme );
        verLogBtn.setBackground( theme );
        loadProgress.setBackground( theme );
        darkThemeRdb.setBackground( theme );
        cassicThemeRdb.setBackground( theme );
        
        nombreConexionTxt.setBackground( theme );
        gestorTxt.setBackground( theme );
        servidorTxt.setBackground( theme );
        puertoTxt.setBackground( theme );
        canalTxt.setBackground( theme );
        connTypeCbx.setBackground( theme );
        connectiosCbx.setBackground( theme );
        cipherCbx.setBackground( theme );
        cargaMasivaTxt.setBackground( theme );
        usuarioTxt.setBackground( theme );
        contrasenaTxt.setBackground( theme );
        
        jLabel1.setForeground(text);
        darkThemeRdb.setForeground(text);
        cassicThemeRdb.setForeground(text);
        connConfJPanel.setForeground(text);
//        connConfJPanel.
        nombreConexionLbl.setForeground(text);
        gestorLbl.setForeground(text);
        servidorLbl.setForeground(text);
        puertoLbl.setForeground(text);
        canalLbl.setForeground(text);
        connTypeLbl.setForeground(text);
        colaMqLbl.setForeground(text);
        usePreConfigChbx.setForeground(text);
        estadoLbl.setForeground(text);
        cargaMasivaChbx.setForeground(text);
        secureConfJPanel.setForeground(text);
        usuarioLbl.setForeground(text);
        contrasenaLbl.setForeground(text);
        reqContrasenaChbx.setForeground(text);
        cipherLbl.setForeground(text);
        rutaKeyStoreLbl.setForeground(text);
    }
}
